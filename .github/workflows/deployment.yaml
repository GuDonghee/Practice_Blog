name: Koo Blog Server Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}

    steps:
      - uses: actions/checkout@v3

      - name: Check if the release is created from the main branch
        run: |
          echo "This release is created from main branch"

      - name: Set Docker Image Tag
        run: |
          SHA_SHORT=$(git rev-parse --short HEAD)
          echo "SHA_SHORT=$SHA_SHORT" >> $GITHUB_ENV 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Build and Push Image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME: koo-blog
          SHA_SHORT: ${{ env.SHA_SHORT }}
        run: |
          docker build -t $REGISTRY/$IMAGE_NAME:$SHA_SHORT .
          docker push $REGISTRY/$IMAGE_NAME:$SHA_SHORT

      - name: Connect to Bastion EC2
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.BASTION_PEM_KEY }}
          host: ${{ secrets.BASTION_IP }}
          username: ubuntu
          debug: true
#
#      - name: Connect to Server EC2
#        uses: appleboy/ssh-action@master
#        with:
#          key: ${{ secrets.SERVER_PEM_KEY }}
#          host: ${{ secrets.SERVER_PRIVATE_IP }}
#          username: ubuntu
#
#      - name: Deploy to EC2
#        env:
#          REGISTRY: ${{ needs.build-and-push.steps.login-ecr.outputs.registry }}
#          IMAGE_NAME: koo-blog
#          SHA_SHORT: ${{ env.SHA_SHORT }}
#        run: |
#          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $REGISTRY
#          docker pull $REGISTRY/$IMAGE_NAME:$SHA_SHORT
#          docker stop koo-blog || true
#          docker rm koo-blog || true
#          docker run -d --name koo-blog -p 8080:8080 $REGISTRY/$IMAGE_NAME:$SHA_SHORT
